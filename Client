#include <fstream>
#include <iostream>
#include <string>
#include <thread>
#include <chrono>

using namespace std;

string filename = "C:\\Users\\Maybe\\source\\repos\\data.txt";
string logFilename = "C:\\Users\\Maybe\\source\\repos\\log.txt";
string file_back = "C:\\Users\\Maybe\\source\\repos\\file_back.txt";

void clearFileBack() {
    ofstream file(file_back, ios::trunc);
    file.close();
}

string waitForServerResponse() {
    string lastResponse = "";
    while (true) {
        this_thread::sleep_for(chrono::milliseconds(500));
        ifstream file(file_back);
        if (!file) {
            continue;
        }
        string response;
        getline(file, response, '\0');
        file.close();
        if (!response.empty() && response != lastResponse) {
            lastResponse = response;
            return response;
        }
    }
}

int main() {
    setlocale(LC_ALL, "rus");

    while (true) {
        cout << "\nВведите имя студента и оценки через пробел (или 'exit' для выхода): ";
        string input;
        getline(cin, input);

        if (input == "exit") {
            cout << "Выход..." << endl;
            break;
        }

        clearFileBack();

        ofstream file(filename, ios::app);
        if (!file) {
            cout << "Ошибка открытия файла!" << endl;
            return 1;
        }
        file << input << endl; // Changed from space to newline
        file.close();

        ofstream logFile(logFilename, ios::app);
        if (!logFile) {
            cout << "Ошибка открытия файла лога!" << endl;
            return 1;
        }
        logFile << input << endl;
        logFile.close();

        cout << "Данные записаны!" << endl;

        string response = waitForServerResponse();
        cout << "Ответ от сервера:\n" << response << endl;
    }

    return 0;
}

Бинарный файл
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <thread>
#include <chrono>

using namespace std;

struct Student {
    string name;
    vector<int> grades;
};

int main() {
    setlocale(LC_ALL, "rus");
    string filename = "C:\\Users\\Maybe\\source\\repos\\data.bin";
    string resultFilename = "C:\\Maybe\\Admin\\source\\repos\\result.txt";

    while (true) {
        cout << "\nВведите имя студента (или 'exit' для выхода): ";
        string name;
        getline(cin, name);

        if (name == "exit") {
            break;
        }

        cout << "Введите оценки студента через пробел: ";
        string gradesInput;
        getline(cin, gradesInput);

        // Парсим оценки
        vector<int> grades;
        stringstream ss(gradesInput);
        string temp;
        while (ss >> temp) {
            try {
                grades.push_back(stoi(temp));
            }
            catch (...) {
                cout << "Ошибка преобразования оценки!" << endl;
                continue;
            }
        }

        if (grades.empty()) {
            cout << "Нет валидных оценок для записи!" << endl;
            continue;
        }

        // Создаем объект Student
        Student student = { name, grades };

        // Записываем в бинарный файл
        ofstream file(filename, ios::binary);
        if (!file) {
            cout << "Ошибка открытия бинарного файла!" << endl;
            continue;
        }

        // Записываем имя
        size_t nameLength = student.name.length();
        file.write(reinterpret_cast<char*>(&nameLength), sizeof(size_t));
        file.write(student.name.c_str(), nameLength);

        // Записываем оценки
        size_t gradesSize = student.grades.size();
        file.write(reinterpret_cast<char*>(&gradesSize), sizeof(size_t));
        file.write(reinterpret_cast<char*>(student.grades.data()), sizeof(int) * gradesSize);
        file.close();

        cout << "Данные отправлены на сервер. Ожидание ответа..." << endl;

        // Ждем обработки сервером
        string result;
        for (int i = 0; i < 5; i++) { // Ждем максимум 5 секунд
            this_thread::sleep_for(chrono::seconds(1));

            ifstream resultFile(resultFilename);
            if (resultFile) {
                getline(resultFile, result);
                resultFile.close();
                break;
            }
        }

        if (!result.empty()) {
            cout << result << endl;
        }
        else {
            cout << "Не удалось получить ответ от сервера!" << endl;
        }
    }

    return 0;
}

TCP
#include <iostream>  
#define _WINSOCK_DEPRECATED_NO_WARNINGS  
// подавление предупреждений библиотеки winsock2
#include <winsock2.h> 
#include <string>
#include <windows.h>
#pragma comment (lib, "Ws2_32.lib")
#pragma warning(disable: 4996)  // подавление предупреждения 4996 
using namespace std;
#define SRV_HOST "localhost"  
#define SRV_PORT 1234 
#define CLNT_PORT 1235  
#define BUF_SIZE 64  
char TXT_ANSW[] = "I am your student\n";
int main() {
    char buff[1024];
    if (WSAStartup(0x0202, (WSADATA*)&buff[0])) {
        cout << "Error WSAStartup \n" << WSAGetLastError();  // Ошибка!
        return -1;
    }
    SOCKET s;
    int from_len;   char buf[BUF_SIZE] = { 0 };    hostent* hp;
    sockaddr_in clnt_sin, srv_sin;
    s = socket(AF_INET, SOCK_STREAM, 0);
    clnt_sin.sin_family = AF_INET;
    clnt_sin.sin_addr.s_addr = 0;
    clnt_sin.sin_port = htons(CLNT_PORT);
    bind(s, (sockaddr*)&clnt_sin, sizeof(clnt_sin));
    hp = gethostbyname(SRV_HOST);
    srv_sin.sin_port = htons(SRV_PORT);
    srv_sin.sin_family = AF_INET;
    ((unsigned long*)&srv_sin.sin_addr)[0] =
        ((unsigned long**)hp->h_addr_list)[0][0];
    connect(s, (sockaddr*)&srv_sin, sizeof(srv_sin));
    string mst;
    do {
        from_len = recv(s, (char*)&buf, BUF_SIZE, 0);
        buf[from_len] = 0;
        cout << buf << endl;
        //send (s, (char *)&TXT_ANSW, sizeof(TXT_ANSW),0); 
        getline(cin, mst);
        int msg_size = mst.size();
        send(s, (char*)&mst[0], msg_size, 0);
    } while (mst != "Bye");
    cout << "exit to infinity" << endl;
    cin.get();    closesocket(s);
    return 0;
}

UDP
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
// #include "stdafx.h"
#include <string>
#include <windows.h>
#include <iostream>
#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)
using namespace std;
#define PORT 666
#define SERVERADDR "127.0.0.1" // IP-адрес сервера

int main()
{
    char buff[10 * 1014];
    cout << "UDP Demo Client\nType quit to quit \n";
    // Шаг 1 - иницилизация библиотеки Winsocks
    if (WSAStartup(0x202, (WSADATA*)&buff))
    {
        cout << "WSASTARTUP ERROR: " << WSAGetLastError() << "\n";
        return -1;
    }
    // Шаг 2 - открытие сокета
    SOCKET my_sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (my_sock == INVALID_SOCKET) {
        cout << "SOCKET() ERROR: " << WSAGetLastError() << "\n";
        WSACleanup();
        return -1;
    }
    // Шаг 3 - обмен сообщений с сервером
    HOSTENT* hst;
    sockaddr_in Daddr;
    Daddr.sin_family = AF_INET;
    Daddr.sin_port = htons(PORT);

    // определение IP-адреса узла
    if (inet_addr(SERVERADDR))
        Daddr.sin_addr.s_addr = inet_addr(SERVERADDR);
    else
        if (hst = gethostbyname(SERVERADDR))
            Daddr.sin_addr.s_addr = ((unsigned long**)
                hst->h_addr_list)[0][0];
        else {
            cout << "Unknown Host: " << WSAGetLastError() << "\n";
            closesocket(my_sock);
            WSACleanup();
            return -1;
        }
    while (1) {
        // чтение сообщения с клавиатуры
        cout << "S<=C:";
        string SS;
        getline(cin, SS);
        if (SS == "quit") break;
        // Передача сообщений на сервер
        sendto(my_sock, (char*)&SS[0], SS.size(), 0,
            (sockaddr*)&Daddr, sizeof(Daddr));
        // Прием сообщения с сервера
        sockaddr_in SRaddr;
        int SRaddr_size = sizeof(SRaddr);
        int n = recvfrom(my_sock, buff, sizeof(buff), 0,
            (sockaddr*)&SRaddr, &SRaddr_size);
        if (n == SOCKET_ERROR) {
            cout << "RECVFROM() ERROR:" << WSAGetLastError() << "\n";
            closesocket(my_sock);
            WSACleanup();  return -1;
        }
        buff[n] = '\0';
        // Вывод принятого с сервера сообщения на экран
        cout << "S=>C:" << buff << "\n";
    }
    // шаг последний - выход
    closesocket(my_sock);
    WSACleanup();     
    return 0;
}
